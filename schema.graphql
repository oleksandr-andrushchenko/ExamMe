# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Category {
  approvedQuestionCount: Int
  createdAt: Timestamp!
  id: ObjectId!
  name: String!
  ownerId: ObjectId
  questionCount: Int
  rating: Rating
  requiredScore: Int
  updatedAt: Timestamp
}

input CreateCategory {
  name: String!
  requiredScore: Int = 0
}

input CreateExam {
  categoryId: ID!
}

input CreateExamQuestionAnswer {
  answer: String
  choice: Int
}

input CreateMe {
  email: String!
  name: String
  password: String!
}

input CreateQuestion {
  categoryId: ID!
  choices: [QuestionChoiceSchema!]
  difficulty: String!
  title: String!
  type: String!
}

input CreateUser {
  email: String!
  name: String
  password: String!
  permissions: [String!]! = ["regular"]
}

input Credentials {
  email: String!
  password: String!
}

type Exam {
  answeredQuestionCount: Int!
  category: Category!
  categoryId: ObjectId!
  completedAt: Timestamp
  correctAnswerCount: Int
  createdAt: Timestamp!
  id: ObjectId!
  ownerId: ObjectId
  questionCount: Int!
  questionNumber: Int
  updatedAt: Timestamp
}

type ExamQuestionSchema {
  answer: String
  choice: Int
  choices: [String!]
  exam: Exam
  number: Int
  question: Question
}

type Mutation {
  createAuthenticationToken(credentials: Credentials!): Token!
  createCategory(createCategory: CreateCategory!): Category!
  createExam(createExam: CreateExam!): Exam!
  createExamCompletion(examId: ID!): Exam!
  createExamQuestionAnswer(createExamQuestionAnswer: CreateExamQuestionAnswer!, examId: ID!, question: Int!): ExamQuestionSchema!
  createMe(createMe: CreateMe!): User!
  createQuestion(createQuestion: CreateQuestion!): Question!
  createUser(createUser: CreateUser!): User!
  deleteCategory(categoryId: ID!): Boolean!
  deleteExam(examId: ID!): Boolean!
  deleteExamQuestionAnswer(examId: ID!, question: Int!): ExamQuestionSchema!
  deleteMe: Boolean!
  deleteQuestion(questionId: ID!): Boolean!
  deleteUser(userId: ID!): Boolean!
  toggleCategoryApprove(categoryId: ID!): Category!
  toggleQuestionApprove(questionId: ID!): Question!
  updateCategory(categoryId: ID!, updateCategory: UpdateCategory!): Category!
  updateMe(updateMe: UpdateMe!): User!
  updateQuestion(questionId: ID!, updateQuestion: UpdateQuestion!): Question!
  updateUser(updateUser: UpdateUser!, userId: ID!): User!
}

"""Mongo object id scalar type"""
scalar ObjectId

type PaginatedCategories {
  data: [Category!]!
  meta: PaginatedMetaSchema!
}

type PaginatedExams {
  data: [Exam!]!
  meta: PaginatedMetaSchema!
}

type PaginatedMetaSchema {
  cursor: String!
  nextCursor: String
  nextUrl: String
  order: String!
  prevCursor: String
  prevUrl: String
  size: Int!
}

type PaginatedQuestions {
  data: [Question!]!
  meta: PaginatedMetaSchema!
}

type PaginatedUsers {
  data: [User!]!
  meta: PaginatedMetaSchema!
}

type PermissionHierarchySchema {
  regular: [String!]
  root: [String!]
}

type PermissionSchema {
  hierarchy: PermissionHierarchySchema
  items: [String!]
}

type Query {
  categories(approved: String, cursor: String = "id", nextCursor: String, order: String = "desc", prevCursor: String, search: String, size: Int = 10, subscription: String): [Category!]!
  category(categoryId: ID!): Category!
  currentExamQuestion(examId: ID!): ExamQuestionSchema!
  currentExams(categoryIds: [ID!]!): [Exam!]!
  exam(examId: ID!): Exam!
  examQuestion(examId: ID!, question: Int!): ExamQuestionSchema!
  exams(categoryId: ID, completion: Boolean, cursor: String = "id", nextCursor: String, order: String = "desc", prevCursor: String, size: Int = 10): [Exam!]!
  me: User!
  paginatedCategories(approved: String, cursor: String = "id", nextCursor: String, order: String = "desc", prevCursor: String, search: String, size: Int = 10, subscription: String): PaginatedCategories!
  paginatedExams(categoryId: ID, completion: Boolean, cursor: String = "id", nextCursor: String, order: String = "desc", prevCursor: String, size: Int = 10): PaginatedExams!
  paginatedQuestions(approved: String, category: ID, cursor: String = "id", difficulty: String, nextCursor: String, order: String = "desc", prevCursor: String, search: String, size: Int = 10, subscription: String, type: String): PaginatedQuestions!
  paginatedUsers(cursor: String = "id", nextCursor: String, order: String = "desc", prevCursor: String, search: String, size: Int = 10): PaginatedUsers!
  permission: PermissionSchema!
  question(questionId: ID!): Question!
  questions(approved: String, category: ID, cursor: String = "id", difficulty: String, nextCursor: String, order: String = "desc", prevCursor: String, search: String, size: Int = 10, subscription: String, type: String): [Question!]!
  users(cursor: String = "id", nextCursor: String, order: String = "desc", prevCursor: String, search: String, size: Int = 10): [User!]!
}

type Question {
  category: Category!
  categoryId: ObjectId!
  choices: [QuestionChoice!]
  createdAt: Timestamp!
  difficulty: String!
  id: ObjectId!
  ownerId: ObjectId
  rating: Rating
  title: String!
  type: String!
  updatedAt: Timestamp
}

type QuestionChoice {
  correct: Boolean
  explanation: String
  title: String!
}

input QuestionChoiceSchema {
  correct: Boolean
  explanation: String
  title: String!
}

type Rating {
  value: Float
  voterCount: Int
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type Token {
  token: String!
}

input UpdateCategory {
  name: String
  requiredScore: Int = 0
}

input UpdateMe {
  email: String
  name: String
  password: String
}

input UpdateQuestion {
  categoryId: ID
  choices: [QuestionChoiceSchema!]
  difficulty: String
  title: String
  type: String
}

input UpdateUser {
  email: String
  name: String
  password: String
  permissions: [String!] = ["regular"]
}

type User {
  createdAt: Timestamp!
  email: String
  id: ObjectId!
  name: String
  ownerId: ObjectId
  permissions: [String!]
  updatedAt: Timestamp
}