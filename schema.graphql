# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Category {
  created: Timestamp!
  id: ObjectId!
  name: String!
  owner: ObjectId!
  questionCount: Int!
  rating: Int
  requiredScore: Int
  updated: Timestamp
  voters: Int
}

input CategorySchema {
  name: String!
  requiredScore: Int = 0
}

input CategoryUpdateSchema {
  name: String
  requiredScore: Int = 0
}

input CreateExamQuestionAnswerSchema {
  answer: String
  choice: Int
}

input CreateExamSchema {
  category: ID!
}

input CredentialsSchema {
  email: String!
  password: String!
}

type Exam {
  answeredCount: Int!
  category: ObjectId!
  completed: Timestamp
  created: Timestamp!
  id: ObjectId!
  owner: ObjectId!
  questionNumber: Int!
  questionsCount: Int!
  updated: Timestamp
}

type ExamQuestionSchema {
  answer: String
  choice: Int
  choices: [String!]
  difficulty: String
  number: Int!
  question: String!
  type: String
}

input MeSchema {
  email: String!
  name: String
  password: String!
}

input MeUpdateSchema {
  email: String
  name: String
  password: String
}

type Mutation {
  addCategory(category: CategorySchema!): Category!
  addExam(exam: CreateExamSchema!): Exam!
  addExamCompletion(examId: ID!): Exam!
  addExamQuestionAnswer(examId: ID!, examQuestionAnswer: CreateExamQuestionAnswerSchema!, question: Int!): ExamQuestionSchema!
  addMe(me: MeSchema!): User!
  addQuestion(question: QuestionSchema!): Question!
  addUser(user: UserSchema!): User!
  authenticate(credentials: CredentialsSchema!): TokenSchema!
  removeCategory(categoryId: ID!): Boolean!
  removeExam(examId: ID!): Boolean!
  removeMe: Boolean!
  removeQuestion(questionId: ID!): Boolean!
  updateCategory(categoryId: ID!, categoryUpdate: CategoryUpdateSchema!): Category!
  updateMe(meUpdate: MeUpdateSchema!): User!
  updateQuestion(questionId: ID!, questionUpdate: QuestionUpdateSchema!): Question!
}

"""Mongo object id scalar type"""
scalar ObjectId

type PermissionHierarchySchema {
  regular: [String!]
  root: [String!]
}

type PermissionSchema {
  hierarchy: PermissionHierarchySchema
  items: [String!]
}

type Query {
  categories(cursor: String = "id", nextCursor: String, order: String = "desc", prevCursor: String, price: String, search: String, size: Int = 10): [Category!]!
  category(categoryId: ID!): Category!
  exam(examId: ID!): Exam!
  examQuestion(examId: ID!, question: Int!): ExamQuestionSchema!
  exams(category: ID, completion: Boolean, cursor: String = "id", nextCursor: String, order: String = "desc", prevCursor: String, size: Int = 10): [Exam!]!
  me: User!
  permission: PermissionSchema!
  question(questionId: ID!): Question!
  questions(category: ID, cursor: String = "id", difficulty: String, nextCursor: String, order: String = "desc", prevCursor: String, price: String, search: String, size: Int = 10, type: String): [Question!]!
}

type Question {
  answers: [QuestionAnswer!]
  category: ObjectId!
  choices: [QuestionChoice!]
  created: Timestamp!
  difficulty: String!
  id: ObjectId!
  owner: ObjectId!
  rating: Int
  title: String!
  type: String!
  updated: Timestamp
  voters: Int
}

type QuestionAnswer {
  correct: Boolean
  explanation: String
  variants: [String!]!
}

input QuestionAnswerSchema {
  correct: Boolean
  explanation: String
  variants: [String!]!
}

type QuestionChoice {
  correct: Boolean
  explanation: String
  title: String!
}

input QuestionChoiceSchema {
  correct: Boolean
  explanation: String
  title: String!
}

input QuestionSchema {
  answers: [QuestionAnswerSchema!]
  category: ID!
  choices: [QuestionChoiceSchema!]
  difficulty: String!
  title: String!
  type: String!
}

input QuestionUpdateSchema {
  answers: [QuestionAnswerSchema!]
  category: ID
  choices: [QuestionChoiceSchema!]
  difficulty: String
  title: String
  type: String
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type TokenSchema {
  token: String!
}

type User {
  created: Timestamp!
  email: String!
  id: ObjectId!
  name: String
  permissions: [String!]!
  updated: Timestamp
}

input UserSchema {
  email: String!
  name: String
  password: String!
  permissions: [String!]! = ["regular"]
}